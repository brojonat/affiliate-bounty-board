package abb

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"
)

// FormatRedditContent formats the Reddit content as a JSON string
func FormatRedditContent(content *RedditContent) string {
	// Create a map to hold the formatted content
	formatted := map[string]interface{}{
		"author":     content.Author,
		"subreddit":  content.Subreddit,
		"score":      content.Score,
		"created":    content.Created.Format(time.RFC3339),
		"permalink":  "https://reddit.com" + content.Permalink,
		"is_comment": content.IsComment,
	}

	// Add content-specific fields
	if content.IsComment {
		formatted["body"] = content.Body
	} else {
		formatted["title"] = content.Title
		if content.Selftext != "" {
			formatted["selftext"] = content.Selftext
		}
		if content.URL != "" && !strings.HasPrefix(content.URL, "https://www.reddit.com") {
			formatted["url"] = content.URL
		}
		formatted["num_comments"] = content.NumComments
	}

	// Add metadata flags
	metadata := map[string]bool{
		"is_stickied": content.IsStickied,
		"is_locked":   content.IsLocked,
		"is_nsfw":     content.IsNSFW,
		"is_spoiler":  content.IsSpoiler,
	}
	formatted["metadata"] = metadata

	// Add flair if present
	if content.Flair != "" {
		formatted["flair"] = content.Flair
	}

	// Convert to JSON with indentation
	jsonBytes, err := json.MarshalIndent(formatted, "", "  ")
	if err != nil {
		return fmt.Sprintf("Error formatting content: %v", err)
	}

	return string(jsonBytes)
}

// FormatYouTubeContent formats the YouTube content as a string
func FormatYouTubeContent(content *YouTubeContent) string {
	if content == nil {
		return "No YouTube content available"
	}

	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("Video: %s\n", content.Title))
	sb.WriteString(fmt.Sprintf("Channel: %s\n", content.ChannelTitle))
	sb.WriteString(fmt.Sprintf("Description:\n%s\n", content.Description))
	sb.WriteString(fmt.Sprintf("Published: %s\n", content.PublishedAt.Format(time.RFC3339)))
	sb.WriteString(fmt.Sprintf("Views: %d\n", content.ViewCount))
	sb.WriteString(fmt.Sprintf("Likes: %d\n", content.LikeCount))
	sb.WriteString(fmt.Sprintf("Comments: %d\n", content.CommentCount))

	if len(content.Captions) > 0 {
		sb.WriteString("\nAvailable Captions:\n")
		for _, caption := range content.Captions {
			sb.WriteString(fmt.Sprintf("- %s (%s)\n", caption.Name, caption.Language))
			if !caption.IsAutoGenerated {
				sb.WriteString("  Content:\n")
				sb.WriteString(caption.Content)
				sb.WriteString("\n")
			}
		}
	}

	return sb.String()
}
