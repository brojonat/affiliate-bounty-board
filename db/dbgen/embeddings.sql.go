// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: embeddings.sql

package dbgen

import (
	"context"

	"github.com/pgvector/pgvector-go"
)

const deleteEmbedding = `-- name: DeleteEmbedding :exec
DELETE FROM bounty_embeddings
WHERE bounty_id = $1
`

func (q *Queries) DeleteEmbedding(ctx context.Context, bountyID string) error {
	_, err := q.db.Exec(ctx, deleteEmbedding, bountyID)
	return err
}

const deleteEmbeddings = `-- name: DeleteEmbeddings :exec
DELETE FROM bounty_embeddings
WHERE bounty_id = ANY($1)
`

func (q *Queries) DeleteEmbeddings(ctx context.Context, bountyIds string) error {
	_, err := q.db.Exec(ctx, deleteEmbeddings, bountyIds)
	return err
}

const deleteEmbeddingsNotIn = `-- name: DeleteEmbeddingsNotIn :exec
DELETE FROM bounty_embeddings
WHERE NOT bounty_id=ANY($1)
`

func (q *Queries) DeleteEmbeddingsNotIn(ctx context.Context, bountyIds string) error {
	_, err := q.db.Exec(ctx, deleteEmbeddingsNotIn, bountyIds)
	return err
}

const insertEmbedding = `-- name: InsertEmbedding :exec
INSERT INTO bounty_embeddings (bounty_id, embedding, environment)
VALUES ($1, $2, $3)
ON CONFLICT (bounty_id) DO UPDATE SET
embedding = EXCLUDED.embedding,
environment = EXCLUDED.environment
`

type InsertEmbeddingParams struct {
	BountyID    string          `json:"bounty_id"`
	Embedding   pgvector.Vector `json:"embedding"`
	Environment string          `json:"environment"`
}

func (q *Queries) InsertEmbedding(ctx context.Context, arg InsertEmbeddingParams) error {
	_, err := q.db.Exec(ctx, insertEmbedding, arg.BountyID, arg.Embedding, arg.Environment)
	return err
}

const listBountyIDs = `-- name: ListBountyIDs :many
SELECT bounty_id
FROM bounty_embeddings
`

func (q *Queries) ListBountyIDs(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, listBountyIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var bounty_id string
		if err := rows.Scan(&bounty_id); err != nil {
			return nil, err
		}
		items = append(items, bounty_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchEmbeddings = `-- name: SearchEmbeddings :many
SELECT bounty_id, embedding
FROM bounty_embeddings
WHERE environment = $1
ORDER BY embedding <=> $2
LIMIT $3
`

type SearchEmbeddingsParams struct {
	Environment string          `json:"environment"`
	Embedding   pgvector.Vector `json:"embedding"`
	RowCount    int32           `json:"row_count"`
}

type SearchEmbeddingsRow struct {
	BountyID  string          `json:"bounty_id"`
	Embedding pgvector.Vector `json:"embedding"`
}

func (q *Queries) SearchEmbeddings(ctx context.Context, arg SearchEmbeddingsParams) ([]SearchEmbeddingsRow, error) {
	rows, err := q.db.Query(ctx, searchEmbeddings, arg.Environment, arg.Embedding, arg.RowCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchEmbeddingsRow
	for rows.Next() {
		var i SearchEmbeddingsRow
		if err := rows.Scan(&i.BountyID, &i.Embedding); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
