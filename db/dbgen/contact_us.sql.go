// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: contact_us.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createContactUsSubmission = `-- name: CreateContactUsSubmission :one
INSERT INTO contact_us_submissions (name, email, message)
VALUES ($1, $2, $3)
RETURNING id, name, email, message, created_at
`

type CreateContactUsSubmissionParams struct {
	Name    pgtype.Text `json:"name"`
	Email   pgtype.Text `json:"email"`
	Message pgtype.Text `json:"message"`
}

func (q *Queries) CreateContactUsSubmission(ctx context.Context, arg CreateContactUsSubmissionParams) (ContactUsSubmission, error) {
	row := q.db.QueryRow(ctx, createContactUsSubmission, arg.Name, arg.Email, arg.Message)
	var i ContactUsSubmission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const getAllContactUsSubmissions = `-- name: GetAllContactUsSubmissions :many
SELECT id, name, email, message, created_at FROM contact_us_submissions
WHERE id >= $1
ORDER BY id ASC
LIMIT $2
`

type GetAllContactUsSubmissionsParams struct {
	ID    int32 `json:"id"`
	Limit int32 `json:"limit"`
}

func (q *Queries) GetAllContactUsSubmissions(ctx context.Context, arg GetAllContactUsSubmissionsParams) ([]ContactUsSubmission, error) {
	rows, err := q.db.Query(ctx, getAllContactUsSubmissions, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContactUsSubmission
	for rows.Next() {
		var i ContactUsSubmission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContactUsSubmission = `-- name: GetContactUsSubmission :one
SELECT id, name, email, message, created_at FROM contact_us_submissions
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetContactUsSubmission(ctx context.Context, id int32) (ContactUsSubmission, error) {
	row := q.db.QueryRow(ctx, getContactUsSubmission, id)
	var i ContactUsSubmission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}
